name: simbiat-dev

# Looks like subnet may change in some cases for no apparent reason, so trying to force it
networks:
  webserver:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

services:
  frankenphp:
    container_name: frankenphp
    build:
      context: ./config/frankenphp
      dockerfile: Dockerfile
      args:
        WEB_SERVER_TEST: ${WEB_SERVER_TEST}
    restart: unless-stopped
    environment:
      WEB_SERVER_TEST: ${WEB_SERVER_TEST}
      CROWDSEC_API_KEY: ${CROWDSEC_CADDY_KEY}
      PHP_INI_DIR: /usr/local/php/config
      PHP_INI_SCAN_DIR: /usr/local/php/config
    networks:
      webserver:
        ipv4_address: 172.21.0.13
    ports:
      - 80:80 # HTTP
      - 443:443 # HTTPS
      - 443:443/udp # HTTP/3
    volumes:
      - ./:/app:rw
      - ./config/frankenphp:/usr/local/php/config:rw
      - ${CADDY_DATA_DIR}:/data:rw
      - ./data/caddy_config:/config:rw
    security_opt:
      - no-new-privileges=true
    depends_on:
      crowdsec:
        condition: service_healthy
      local.simbiat.dev:
        condition: service_healthy
    links:
      - local.simbiat.dev:mysql
      - local.simbiat.dev:database
    #We need to register cron task and start cron service before the endpoint
    command: >
      /bin/sh -c "printenv | grep -v "no_proxy" > /etc/environment
                  cp /usr/local/php/config/cron/php.cron /etc/cron.d/php.cron &&
                  chmod 0644 /etc/cron.d/php.cron &&
                  crontab /etc/cron.d/php.cron &&
                  cron &&
                  docker-php-entrypoint --config /usr/local/php/config/caddy.json5 --adapter json5"

  crowdsec:
    #Based on https://github.com/crowdsecurity/example-docker-compose/tree/main/caddy
    container_name: crowdsec
    image: crowdsecurity/crowdsec:latest
    restart: unless-stopped
    environment:
      GID: 1000
      COLLECTIONS: crowdsecurity/caddy crowdsecurity/whitelist-good-actors crowdsecurity/http-cve crowdsecurity/http-dos crowdsecurity/base-http-scenarios crowdsecurity/appsec-crs crowdsecurity/appsec-generic-rules crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-wordpress crowdsecurity/wordpress crowdsecurity/discord-crawler-whitelist
      BOUNCER_KEY_CADDY: ${CROWDSEC_CADDY_KEY}
      BOUNCER_KEY_IPTABLES: ${CROWDSEC_IPTABLES_KEY}
    networks:
      webserver:
        ipv4_address: 172.21.0.12
    ports:
      - "8080:8080"
    volumes:
      - ./data/crowdsec:/var/lib/crowdsec/data/:rw
      - ./config/crowdsec/yaml/acquis.yaml:/etc/crowdsec/acquis.yaml:rw
      - ./config/crowdsec/yaml/acquis:/etc/crowdsec/acquis.d/:rw
      - ./config/crowdsec/yaml/config.yaml.local:/etc/crowdsec/config.yaml.local:rw
      - ./config/crowdsec/yaml/online_api_credentials.yaml:/etc/crowdsec/online_api_credentials.yaml:rw
      - ./config/crowdsec/cron:/usr/local/cron/:ro
      #Required to read syslog. This will be valid only on UNIX
      - /var/log/:/var/log/:ro
      #Caddy logs folder is RW, because we're also writing Crowdsec logs here
      - ./logs:/usr/local/logs/:rw
    security_opt:
      - no-new-privileges=true
    healthcheck:
      test: [ "CMD", "cscli", "lapi", "status" ]
      start_period: 120s
      interval: 10s
      timeout: 5s
      retries: 3
    #Register log rotator
    command: >
      /bin/sh -c "cp /usr/local/cron/crowdsec.cron /etc/cron.d/crowdsec.cron &&
                  chmod 0644 /etc/cron.d/crowdsec.cron &&
                  crontab /etc/cron.d/crowdsec.cron &&
                  /bin/bash /docker_start.sh"

  local.simbiat.dev:
    container_name: mariadb
    build:
      context: ./config/mysql
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      WEB_SERVER_TEST: ${WEB_SERVER_TEST}
      MARIADB_AUTO_UPGRADE: true
      #Settings for SSL certificates generated by CRON job
      MARIADB_TLS_SETTING_CA_NAME: ${MARIADB_TLS_SETTING_CA_NAME}
      MARIADB_TLS_SETTING_CLIENT_NAME: ${MARIADB_TLS_SETTING_CLIENT_NAME}
      MARIADB_TLS_SETTING_SERVER_NAME: ${MARIADB_TLS_SETTING_SERVER_NAME}
      #Alias in format of "DNS:domain_name[,DNS:domain_name2]". If you do not need an alias use the servername for "domain_name"
      MARIADB_TLS_SETTING_SERVER_ALIAS: ${MARIADB_TLS_SETTING_SERVER_ALIAS}
      #Password for backups created by CRON job
      MARIADB_BACKUP_PASSWORD: ${WEB_SERVER_TEST}
    networks:
      webserver:
        ipv4_address: 172.21.0.10
    ports:
      - ${MARIADB_PORT}:${MARIADB_PORT}
    volumes:
      - ${MARIADB_DATA_DIR}:/var/lib/mysql:rw
      - ./config/mysql:/etc/mysql/conf.d:ro
      - ${MARIADB_KEYS_DIR}:/usr/local/keys:rw
      - ./logs:/usr/local/logs:rw
      - ${MARIADB_BACKUP_DIR}:/usr/local/backups:rw
      - ./DDL:/usr/local/DDL:ro
    security_opt:
      - no-new-privileges=true
    healthcheck:
      #`--connect` is removed due to known bug
      test: [ "CMD", "healthcheck.sh", "--defaults-file=/etc/mysql/conf.d/my.cnf", "--innodb_initialized", "--innodb_buffer_pool_loaded", "--mariadbupgrade" ]
      start_period: 120s
      interval: 10s
      timeout: 5s
      retries: 3
    #We want to generate keys automatically, and it is also a good idea to regenerate them on each restart
    #We need to ensure that buffer pool file exists, too
    #We need to register cron tasks and start cron service before the endpoint
    command: >
      /bin/sh -c "printenv | grep -v "no_proxy" > /etc/environment
                  /etc/mysql/conf.d/cron/ssl.sh &&
                  touch /var/lib/mysql/ib_buffer_pool &&
                  chown mysql:mysql /var/lib/mysql/ib_buffer_pool &&
                  cp /etc/mysql/conf.d/cron/mariadb.cron /etc/cron.d/mariadb.cron &&
                  chmod 0644 /etc/cron.d/mariadb.cron &&
                  crontab /etc/cron.d/mariadb.cron &&
                  cron &&
                  docker-entrypoint.sh mariadbd"
