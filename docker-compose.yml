name: simbiat-dev

#It looks like subnet may change in some cases for no clear reason, so trying to force it
networks:
  webserver:
    driver: bridge
    enable_ipv6: true
    ipam:
      config:
        - subnet: 172.21.0.0/16
        - subnet: 2001:db8:1::/64

volumes:
  node_modules: { }
  mariadb_socket:
    driver: local

services:
  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin:5.2.2-apache
    profiles:
      - dev_only
    restart: unless-stopped
    environment:
      PMA_ARBITRARY: 0
      PMA_SOCKET: ${DATABASE_SOCKET}
      PMA_USER: ${DATABASE_USER}
      PMA_PASSWORD: ${DATABASE_PASSWORD}
      PMA_PMADB: phpmyadmin
      PMA_CONTROLUSER: phpmyadmin
      PMA_CONTROLPASS: ${PHPMYADMIN_PASSWORD}
      PMA_UPLOADDIR: /etc/phpmyadmin/upload
      PMA_SAVEDIR: /etc/phpmyadmin/save
    networks:
      - webserver
    ports:
      - ${PHPMYADMIN_PORT}:80
    volumes:
      - mariadb_socket:/run/mysqld/:ro
      - ./config/phpmyadmin/config.inc.php:/etc/phpmyadmin/config.user.inc.php:ro
      - ./build/phpmyadmin/upload:/etc/phpmyadmin/upload:ro
      - ./build/phpmyadmin/save:/etc/phpmyadmin/save:rw
    security_opt:
      - no-new-privileges=true
    depends_on:
      mariadb:
        condition: service_healthy
    links:
      - mariadb:mysql
      - mariadb:database
    #Before starting the container, it's better to clear the session files. It looks like otherwise the service can pick up older settings (unless manually clearing session data).
    #This is also important in case something happens to the phpMyAdmin database/tables, and they got removed, because otherwise it will keep showing error without allowing to fix it directly through the UI.
    command: >
      /bin/sh -c "rm -f -r /sessions/* &
                  /docker-entrypoint.sh apache2-foreground"

  #Currently unused due to https://youtrack.jetbrains.com/issue/WEB-73725
  node:
    container_name: nodejs
    image: node:latest
    profiles:
      - dev_only
    restart: no
    networks:
      - webserver
    security_opt:
      - no-new-privileges=true
    volumes:
      - ./package.json:/usr/app/package.json:ro
      - ./package-lock.json:/usr/app/package-lock.json:rw
      - ./build/js:/usr/app/js:rw
      - node_modules:/usr/app/node_modules:rw
      - ./build/css:/usr/app/css:ro
      - ./public/assets/:/usr/app/output:rw
    working_dir: /usr/app
    #Command is required in case some manual runs are needed, since PHPStorm stops the container right away (uses "run")
    #command: tail -f /dev/null

  geoip:
    container_name: geoip
    build:
      context: ./config/geoip
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      GEOIPUPDATE_PRESERVE_FILE_TIMES: 1
      GEOIPUPDATE_FREQUENCY: 24
      GEOIPUPDATE_ACCOUNT_ID: ${GEOIP_ACCOUNT}
      GEOIPUPDATE_LICENSE_KEY: ${GEOIP_LICENSE}
      GEOIPUPDATE_EDITION_IDS: GeoLite2-ASN GeoLite2-City
    volumes:
      - ./data/geoip/:/usr/share/GeoIP/:rw

  frankenphp:
    container_name: frankenphp
    build:
      context: ./config/frankenphp
      dockerfile: Dockerfile
      args:
        WEB_SERVER_TEST: ${WEB_SERVER_TEST}
    restart: unless-stopped
    environment:
      WEB_SERVER_TEST: ${WEB_SERVER_TEST}
      CROWDSEC_API_KEY: ${CROWDSEC_CADDY_KEY}
      PHP_INI_DIR: /usr/local/php/config
      PHP_INI_SCAN_DIR: /usr/local/php/config
    networks:
      - webserver
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
      - "443:443/udp" # HTTP/3
    volumes:
      - mariadb_socket:/run/mysqld/:ro
      - ./:/app:rw
      - ./config/frankenphp:/usr/local/php/config:rw
      - ${CADDY_DATA_DIR}:/data:rw
      - ./data/caddy_config:/config:rw
    security_opt:
      - no-new-privileges=true
    depends_on:
      geoip:
        condition: service_started
      crowdsec:
        condition: service_healthy
      mariadb:
        condition: service_healthy
    links:
      - mariadb:mysql
      - mariadb:database
    command: >
      /bin/sh -c "printenv | grep -v "no_proxy" > /etc/environment &&
                  #We need to register cron task and start cron service before the endpoint
                  cp /usr/local/php/config/cron/php.cron /etc/cron.d/php.cron &&
                  chmod 0644 /etc/cron.d/php.cron &&
                  crontab /etc/cron.d/php.cron &&
                  cron &&
                  docker-php-entrypoint --config /usr/local/php/config/caddy.json5 --adapter json5"

  crowdsec:
    #Based on https://github.com/crowdsecurity/example-docker-compose/tree/main/caddy
    container_name: crowdsec
    build:
      context: ./config/crowdsec
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      GID: 1000
      COLLECTIONS: crowdsecurity/caddy crowdsecurity/whitelist-good-actors crowdsecurity/http-cve crowdsecurity/http-dos crowdsecurity/base-http-scenarios crowdsecurity/appsec-generic-rules crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-wordpress crowdsecurity/wordpress crowdsecurity/discord-crawler-whitelist openappsec/openappsec
      BOUNCER_KEY_CADDY: ${CROWDSEC_CADDY_KEY}
      BOUNCER_KEY_IPTABLES: ${CROWDSEC_IPTABLES_KEY}
      ENROLL_KEY: ${CROWDSEC_ENROLL_KEY}
      ENABLE_CONSOLE_MANAGEMENT: true
      ENABLE_CONSOLE_ALL: true
      DATABASE_SOCKET: ${DATABASE_SOCKET}
      DATABASE_PASSWORD: ${CROWDSEC_PASSWORD}
    networks:
      - webserver
    ports:
      - "8080:8080"
      - "6060:6060"
      - "7422:7422"
    volumes:
      - mariadb_socket:/run/mysqld/:ro
      - ./data/crowdsec/:/var/lib/crowdsec/data/:rw
      - ./data/geoip/GeoLite2-ASN.mmdb:/var/lib/crowdsec/data/GeoLite2-ASN.mmdb:ro
      - ./data/geoip/GeoLite2-City.mmdb:/var/lib/crowdsec/data/GeoLite2-City.mmdb:ro
      - ./config/crowdsec/yaml/acquis.yaml:/etc/crowdsec/acquis.yaml:ro
      - ./config/crowdsec/yaml/acquis/:/etc/crowdsec/acquis.d/:rw
      - ./config/crowdsec/yaml/config.yaml.local:/etc/crowdsec/config.yaml.local:ro
      - ./config/crowdsec/yaml/online_api_credentials.yaml:/etc/crowdsec/online_api_credentials.yaml:ro
      - ./config/crowdsec/yaml/appsec/simbiat-appsec.yaml:/etc/crowdsec/appsec-configs/simbiat-appsec.yaml:ro
      - ./config/crowdsec/yaml/appsec/simbiat-seclang.yaml:/etc/crowdsec/appsec-rules/simbiat-seclang.yaml:ro
      - ./config/crowdsec/CoreRuleSet/:/var/lib/crowdsec/data/CoreRuleSet/:ro
      #Required to read syslog. This will be valid only on UNIX
      - /var/log/:/var/log/:ro
      #Caddy logs folder is RW, because we're also writing Crowdsec logs here
      - ./logs:/usr/local/logs/:rw
    security_opt:
      - no-new-privileges=true
    depends_on:
      geoip:
        condition: service_started
      mariadb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "cscli", "lapi", "status" ]
      start_period: 120s
      interval: 10s
      timeout: 5s
      retries: 3
    #Override image's entrypoint to execute custom command
    entrypoint: ''
    command: >
      /bin/sh -c "#Need to ensure that CRS files are up-to-date every time, so we remove them first
                  rm -f /var/lib/crowdsec/data/REQUEST-9*.conf /var/lib/crowdsec/data/RESPONSE-9*.conf /var/lib/crowdsec/data/iis-errors.data /var/lib/crowdsec/data/java-classes.data /var/lib/crowdsec/data/java-errors.data /var/lib/crowdsec/data/lfi-os-files.data /var/lib/crowdsec/data/php-config-directives.data /var/lib/crowdsec/data/php-errors.data /var/lib/crowdsec/data/php-errors-pl2.data /var/lib/crowdsec/data/php-function-names-933150.data /var/lib/crowdsec/data/php-function-names-933151.data /var/lib/crowdsec/data/php-variables.data /var/lib/crowdsec/data/restricted-files.data /var/lib/crowdsec/data/restricted-upload.data /var/lib/crowdsec/data/scanners-user-agents.data /var/lib/crowdsec/data/sql-errors.data /var/lib/crowdsec/data/ssrf.data /var/lib/crowdsec/data/unix-shell.data /var/lib/crowdsec/data/web-shells-asp.data /var/lib/crowdsec/data/web-shells-php.data /var/lib/crowdsec/data/windows-powershell-commands.data &
                  cp -r /var/lib/OWASP/rules/* /var/lib/crowdsec/data/ &&
                  #Don't remember why this is required, I think the folder is not created automatically in some cases
                  mkdir -p /etc/periodic/daily/ &
                  /bin/bash /docker_start.sh"

  mariadb:
    container_name: mariadb
    build:
      context: .
      dockerfile: config/mysql/Dockerfile
    restart: unless-stopped
    environment:
      WEB_SERVER_TEST: ${WEB_SERVER_TEST}
      MARIADB_AUTO_UPGRADE: true
      #Password for backups created by CRON job
      MARIADB_BACKUP_PASSWORD: ${MARIADB_BACKUP_PASSWORD}
      #Limit root access from localhost only
      MARIADB_ROOT_HOST: localhost
      MARIADB_RANDOM_ROOT_PASSWORD: true
      MARIADB_MYSQL_LOCALHOST_USER: true
      #Pass database name for backup
      DATABASE_NAME: ${DATABASE_NAME}
    networks:
      - webserver
    ports:
      - "3306:3306"
    volumes:
      - mariadb_socket:/run/mysqld/:rw
      - ${MARIADB_DATA_DIR}:/var/lib/mysql:rw
      - ./config/mysql:/etc/mysql/conf.d:ro
      - ./logs:/usr/local/logs:rw
      - ${MARIADB_BACKUP_DIR}:/usr/local/backups:rw
      - ./build/DDL:/usr/local/DDL:ro
    security_opt:
      - no-new-privileges=true
    healthcheck:
      test: [ "CMD", "healthcheck.sh", "--defaults-file=/etc/mysql/conf.d/my.cnf", "--connect", "--innodb_initialized", "--innodb_buffer_pool_loaded", "--mariadbupgrade" ]
      start_period: 120s
      interval: 10s
      timeout: 5s
      retries: 3
    command: >
      /bin/sh -c "printenv | grep -v "no_proxy" > /etc/environment &&
                  #We need to ensure that buffer pool file exists
                  touch /var/lib/mysql/ib_buffer_pool &&
                  chown mysql:mysql /var/lib/mysql/ib_buffer_pool &&
                  #We need to register cron tasks and start cron service before the endpoint
                  cp /etc/mysql/conf.d/cron/mariadb.cron /etc/cron.d/mariadb.cron &&
                  chmod 0644 /etc/cron.d/mariadb.cron &&
                  crontab /etc/cron.d/mariadb.cron &&
                  cron &&
                  #If maintenance flag is found, it implies crash during maintenance: rename it to indicate this
                  mv /usr/local/backups/maintenance.flag /usr/local/backups/crash.flag
                  docker-entrypoint.sh mariadbd"
