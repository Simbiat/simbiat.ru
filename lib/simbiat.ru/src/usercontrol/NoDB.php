<?php
declare(strict_types=1);
namespace Simbiat\usercontrol;

#Functions that are related to UserControl, but do not require database connection
class NoDB
{
    #Attach common settings
    use Common;

    #Function to calculate optimal parameters for Argon2 hashing
    #Clarification for whoever reads this: while it is recommended to first allocate as much memory as possible and then increase the number of iterations, if this logic is applied to a high-load web-server it will become highly likely to get the memory exhaustion during concurrent runs of the validation. Thus this automated function first calculates the number of iterations and then memory.
    #This does not necessarily mean reduction of security, but if you feel unsafe, adjust the setting file generated by this function to settings that work better for you. Keep in mind, that amount of memory is recommended to be a value of power of 2 (1024 is the minimum one).
    public function argonCalc(float $targetTime = 1.0): array
    {
        #Create directory if missing
        if (!is_dir($GLOBALS['siteconfig']['security_cache'])) {
            mkdir($GLOBALS['siteconfig']['security_cache']);
        }
        #Calculate number of available threads
        $threads = $this->countCores()*2;
        #Calculate iterations
        $iterations = 0;
        do {
            $iterations++;
            $start = microtime(true);
            password_hash('rel@t!velyl0ngte$t5tr1ng', PASSWORD_ARGON2ID, ['threads' => $threads, 'time_cost' => $iterations]);
            $end = microtime(true);
        } while (($end - $start) < $targetTime);
        #Calculate memory. We start from power = 9, because Argon supports minimum value of 1024 (power = 10)
        $power = 9;
        do {
            $power++;
            $memory = 2**$power;
            $start = microtime(true);
            password_hash('rel@t!velyl0ngte$t5tr1ng', PASSWORD_ARGON2ID, ['threads' => $threads, 'time_cost' => $iterations, 'memory_cost' => $memory]);
            $end = microtime(true);
        } while (($end - $start) < $targetTime);
        $argonSettings = ['threads' => $threads, 'time_cost' => $iterations, 'memory_cost' => $memory];
        #Write config file
        file_put_contents($GLOBALS['siteconfig']['security_cache']. 'argon.json', json_encode($argonSettings, JSON_PRETTY_PRINT));
        return $argonSettings;
    }

    #Helper function to get count of available cores
    public function countCores(): int
    {
        if (function_exists('shell_exec') === true) {
            $cores = intval(shell_exec((PHP_OS_FAMILY === 'Windows' ? 'echo %NUMBER_OF_PROCESSORS%' : 'nproc')));
        } else {
            $cores = 1;
        }
        if ($cores < 1) {
            $cores = 1;
        }
        return $cores;
    }

    #Function to generate passphrase for encrypt and decrypt functions
    public function genCrypto(): array
    {
        #Create directory if missing
        if (!is_dir($GLOBALS['siteconfig']['security_cache'])) {
            mkdir($GLOBALS['siteconfig']['security_cache']);
        }
        $passphrase = bin2hex(openssl_random_pseudo_bytes(openssl_cipher_iv_length('AES-256-GCM')));
        #Using array, in case some other settings will be required in the future
        $cryptoSettings = ['passphrase' => $passphrase];
        #Write config file
        file_put_contents($GLOBALS['siteconfig']['security_cache']. 'aes.json', json_encode($cryptoSettings, JSON_PRETTY_PRINT));
        return $cryptoSettings;
    }
}
