USE `simbiatr_simbiat`;
CREATE TABLE IF NOT EXISTS `maintainer__tables` (
  `schema` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_as_ci NOT NULL COMMENT 'Name of the table''s schema',
  `table` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_as_ci NOT NULL COMMENT 'Name of the table',
  `analyzed` datetime DEFAULT NULL COMMENT 'Date and time of the last analysis',
  `engine` varchar(64) DEFAULT NULL COMMENT 'Table''s engine',
  `row_format` varchar(10) DEFAULT NULL COMMENT 'Table''s row format',
  `has_fulltext` tinyint(1) unsigned NOT NULL DEFAULT 0 COMMENT 'Flag indicating if table has FULLTEXT index',
  `page_compressed` tinyint(1) unsigned NOT NULL DEFAULT 0 COMMENT 'Flag indicating that table uses InnoDB page compression',
  `rows_current` bigint(21) unsigned NOT NULL DEFAULT 0 COMMENT 'Current number of rows in table',
  `exact_rows` tinyint(1) unsigned NOT NULL DEFAULT 0 COMMENT 'Whether to get exact row count for the table',
  `rows_date` datetime DEFAULT NULL COMMENT 'Date when exact row count was taken',
  `update_time` datetime DEFAULT NULL COMMENT 'Last update time to the table at the time of analysis',
  `only_if_changed` tinyint(1) unsigned NOT NULL DEFAULT 1 COMMENT 'Whether so suggest action only if the table has changed since last time the action was run',
  `threshold_rows_delta` bigint(21) unsigned NOT NULL DEFAULT 10000 COMMENT 'Minimum delta for number of rows in the table compared to last run of a command to consider a table significantly changed',
  `use_checksum` tinyint(1) unsigned NOT NULL DEFAULT 0 COMMENT 'Whether to get CHECKSUM use it to determine if there was a change',
  `checksum_current` bigint(21) unsigned DEFAULT NULL COMMENT 'Optional current checksum of the table to evaluate if there was a change of data',
  `checksum_date` datetime DEFAULT NULL COMMENT 'Time the last checksum was taken',
  `data_length_current` bigint(21) unsigned NOT NULL DEFAULT 0 COMMENT 'Current size of the data only',
  `index_length_current` bigint(21) unsigned NOT NULL DEFAULT 0 COMMENT 'Current size of the indexes only',
  `data_free_current` bigint(21) unsigned NOT NULL DEFAULT 0 COMMENT 'Current free space',
  `total_length_current` bigint(21) unsigned GENERATED ALWAYS AS (`data_length_current` + `index_length_current` + `data_free_current`) VIRTUAL COMMENT 'Current table size',
  `fragmentation_current` float(4,2) unsigned GENERATED ALWAYS AS (`data_free_current` / (`data_length_current` + `index_length_current` + `data_free_current`) * 100) VIRTUAL COMMENT 'Current table fragmentation',
  `threshold_fragmentation` float(4,2) unsigned NOT NULL DEFAULT 10.00 COMMENT 'Minimum fragmentation ratio to suggest a table for OPTIMIZE',
  `analyze` tinyint(1) unsigned NOT NULL DEFAULT 0 COMMENT 'Flag indicating whether ANALYZE was suggested to be run during last analysis',
  `analyze_suggest` tinyint(1) unsigned NOT NULL DEFAULT 1 COMMENT 'Whether ANALYZE can be suggested',
  `analyze_auto_run` tinyint(1) unsigned NOT NULL DEFAULT 1 COMMENT 'Whether ANALYZE can be run automatically',
  `analyze_days_delay` smallint(5) unsigned NOT NULL DEFAULT 14 COMMENT 'Days to wait between runs of ANALYZE',
  `analyze_histogram` tinyint(1) unsigned NOT NULL DEFAULT 0 COMMENT 'Flag indicating whether HISTOGRAM optimization should be ran when ANALYZE is suggested',
  `analyze_date` datetime DEFAULT NULL COMMENT 'Date when ANALYZE was run last time',
  `analyze_days_since` int(10) GENERATED ALWAYS AS (to_days(curdate()) - to_days(`analyze_date`)) VIRTUAL COMMENT 'Days since last time CHECK was run',
  `analyze_rows` bigint(21) unsigned DEFAULT NULL COMMENT 'Number of rows in the table at the time when last ANALYZE was run',
  `analyze_checksum` bigint(21) unsigned DEFAULT NULL COMMENT 'Optional checksum of the table at the time when last ANALYZE was run',
  `analyze_rows_delta` bigint(21) unsigned GENERATED ALWAYS AS (greatest(`rows_current`,`analyze_rows`) - least(`rows_current`,`analyze_rows`)) VIRTUAL COMMENT 'Current delta of rows in table compared to the time when last ANALYZE was run',
  `check` tinyint(1) unsigned NOT NULL DEFAULT 0 COMMENT 'Flag indicating whether CHECK was suggested to be run during last analysis',
  `check_suggest` tinyint(1) unsigned NOT NULL DEFAULT 1 COMMENT 'Whether CHECK can be suggested',
  `check_auto_run` tinyint(1) unsigned NOT NULL DEFAULT 0 COMMENT 'Whether CHECK can be run automatically',
  `check_days_delay` smallint(5) unsigned NOT NULL DEFAULT 30 COMMENT 'Days to wait between runs of CHECK',
  `check_date` datetime DEFAULT NULL COMMENT 'Date when CHECK was run last time',
  `check_days_since` int(10) GENERATED ALWAYS AS (to_days(curdate()) - to_days(`check_date`)) VIRTUAL COMMENT 'Days since last time CHECK was run',
  `check_rows` bigint(21) unsigned DEFAULT NULL COMMENT 'Number of rows in the table at the time when last CHECK was run',
  `check_checksum` bigint(21) unsigned DEFAULT NULL COMMENT 'Optional checksum of the table at the time when last CHECK was run',
  `check_rows_delta` bigint(21) unsigned GENERATED ALWAYS AS (greatest(`rows_current`,`check_rows`) - least(`rows_current`,`check_rows`)) VIRTUAL COMMENT 'Current delta of rows in table compared to the time when last CHECK was run',
  `optimize` tinyint(1) unsigned NOT NULL DEFAULT 0 COMMENT 'Flag indicating whether OPTIMIZATION was suggested to be run during last analysis',
  `optimize_suggest` tinyint(1) unsigned NOT NULL DEFAULT 1 COMMENT 'Whether OPTIMIZE can be suggested',
  `optimize_auto_run` tinyint(1) unsigned NOT NULL DEFAULT 1 COMMENT 'Whether OPTIMIZE can be run automatically',
  `optimize_days_delay` smallint(5) unsigned NOT NULL DEFAULT 30 COMMENT 'Days to wait between runs of OPTIMIZE',
  `optimize_date` datetime DEFAULT NULL COMMENT 'Date when OPTIMIZE was run last time',
  `optimize_days_since` int(10) GENERATED ALWAYS AS (to_days(curdate()) - to_days(`optimize_date`)) VIRTUAL COMMENT 'Days since last time CHECK was run',
  `data_length_before` bigint(21) unsigned DEFAULT NULL COMMENT 'Size of data before last OPTIMIZE',
  `index_length_before` bigint(21) unsigned DEFAULT NULL COMMENT 'Size of index before last OPTIMIZE',
  `data_free_before` bigint(21) unsigned DEFAULT NULL COMMENT 'Size of free space before last OPTIMIZE',
  `fragmentation_before` float(4,2) unsigned GENERATED ALWAYS AS (`data_free_before` / (`data_length_before` + `index_length_before` + `data_free_before`) * 100) VIRTUAL COMMENT 'Fragmentation value before last OPTIMIZE',
  `data_length_after` bigint(21) unsigned DEFAULT NULL COMMENT 'Size of data after last OPTIMIZE',
  `index_length_after` bigint(21) unsigned DEFAULT NULL COMMENT 'Size of index after last OPTIMIZE',
  `data_free_after` bigint(21) unsigned DEFAULT NULL COMMENT 'Size of free space after last OPTIMIZE',
  `fragmentation_after` float(4,2) unsigned GENERATED ALWAYS AS (`data_free_after` / (`data_length_after` + `index_length_after` + `data_free_after`) * 100) VIRTUAL COMMENT 'Fragmentation value after last OPTIMIZE',
  `fulltext_rebuild` tinyint(1) unsigned NOT NULL DEFAULT 0 COMMENT 'Flag indicating whether FULLTEXT rebuild was suggested',
  `fulltext_rebuild_auto_run` tinyint(1) unsigned NOT NULL DEFAULT 0 COMMENT 'Whether FULLTEXT rebuild can be run automatically',
  `fulltext_rebuild_date` datetime DEFAULT NULL COMMENT 'Date when FULLTEXT rebuild was run last time',
  `repair` tinyint(1) unsigned NOT NULL DEFAULT 0 COMMENT 'Flag indicating whether REPAIR was suggested to be run during last analysis',
  `repair_date` datetime DEFAULT NULL COMMENT 'Date when REPAIR was run last time',
  `compress` tinyint(1) unsigned NOT NULL DEFAULT 0 COMMENT 'Flag indicating whether compression was suggested during last analysis',
  `compress_suggest` tinyint(1) unsigned NOT NULL DEFAULT 1 COMMENT 'Whether compression can be suggested',
  PRIMARY KEY (`schema`,`table`) USING BTREE,
  KEY `analyze` (`analyze`),
  KEY `check` (`check`),
  KEY `compress` (`compress`),
  KEY `optimize` (`optimize`),
  KEY `repair` (`repair`),
  KEY `analyzed` (`analyzed` DESC),
  KEY `total_length_current` (`total_length_current`),
  KEY `fulltext_rebuild` (`fulltext_rebuild`),
  KEY `has_fulltext` (`has_fulltext`),
  KEY `engine` (`engine`),
  KEY `row_format` (`row_format`),
  KEY `analyze_suggest` (`analyze_suggest`),
  KEY `check_suggest` (`check_suggest`),
  KEY `optimize_suggest` (`optimize_suggest`),
  KEY `compress_suggest` (`compress_suggest`),
  KEY `use_checksum` (`use_checksum`),
  KEY `exact_rows` (`exact_rows`),
  KEY `rows_current` (`rows_current`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_as_cs COMMENT='Tables'' statistics and suggestions' `PAGE_COMPRESSED`='ON' ROW_FORMAT=Dynamic;